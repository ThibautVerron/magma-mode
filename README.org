# -*- eval: (auto-fill-mode 1); -*-
#LINK: magma      http://magma.maths.usyd.edu.au/magma/
#LINK: magma-mode http://www-polsys.lip6.fr/~bettale/magma-mode/
#LINK: emacs-lisp http://www.gnu.org/software/emacs/manual/html_node/elisp/

* Magma-mode
** Basics

This is a mode for editting input files for the computer algebra
software [[http://magma.maths.usyd.edu.au/magma/][Magma]] in emacs.

It is based on the [[http://www-polsys.lip6.fr/~bettale/magma-mode/][magma-mode]] written by Luk Bettale.  The font-lock
(syntax highlight) specifications were taken from this mode, as well
as the interaction with a magma process through term-mode.

The new features of this mode are principally a new indentation
engine, based on [[http://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE.html][SMIE]] and a new way of interacting with a magma
process, through comint. 

** Information

This is beta software, all features are not yet fully implemented.
For sensible usage, Luk Bettale's [[http://www-polsys.lip6.fr/~bettale/magma-mode/][magma-mode]] has been more thoroughly
tested over the years.

** Installation instructions

1. Clone the repository in your favorite elisp folder

   #+begin_src shell-script
      cd $favoriteElispFolder
      git clone https://github.com/ThibautVerron/magma-mode.git
   #+end_src    

2. If needed, install the required package [[https://github.com/rejeep/f.el][f.el]] (you should install it
   anyway).
   
3. Add the following to your emacs init file :

   #+begin_src emacs-lisp
      (add-to-list 'load-path "<FavoriteElispFolder>/magma-mode")
      (require 'magma-mode "<FavoriteElispFolder>/magma-mode/magma-mode.el")
      ;; Or simply (require 'magma-mode) if you aren't using any other magma-mode
   #+end_src

4. Additional setup:

   #+begin_src emacs-lisp 
      ;; If you want to load the mode automatically with some file extensions
      (setq auto-mode-alist
      (append '(("\\.mgm$\\|\\.m$" . magma-mode))
      auto-mode-alist))
      
      ;; If you need to use a different magma path
      (setq magma-interactive-program "magma")
      
      ;; If you need to pass specific arguments to magma
      (setq magma-interactive-arguments '())
      
      ;; At the moment, the following options need to be inserted
      ;; *before* "(require 'magma-mode')", and you need to either
      ;; restart emacs or reload the magma loadfile after changing
      ;; it. It is a design flaw and should be fixed in the future.
      
      ;; If you want to use comint instead of term.
      
      (setq magma-interactive-use-comint t)
      
      ;; Electric return key (try RET or C-j, or C-c C-j) while in a
      ;; string or comment. Like it or hate it, enable it or disable
      ;; it. This is beta, might ruin the indentation of your document,
      ;; crash emacs or eat your cat.
      (setq magma-use-electric-newline t)
   #+end_src

** Comint vs term

=Term-mode= will basically render the magma experience you would have in
a regular terminal emulator, regardless of emacs. Only the prompt can be
written, =C-p= and =C-n= browse the history instead of scrolling the
window, /et caetera/.

Another specificity of term-mode is that it intercepts some prefix
keys, most notably =C-c= and =C-x=. For most purposes, =C-x= needs to
be replaced with =C-c=.  So for example, if you need to switch from
your magma code buffer to the magma process buffer, then switch back,
you'll first press =C-x o= (=other-window=), then =C-c o=.

This can be changed by turning on =term-line-mode= (=C-c C-j=), but
this changes the behavior of =term-mode= way beyond the mere
interception of signal keys. To change back to the regular behavior,
turn on =term-char-mode= (=C-x C-k=). Another option is to use =C-c o=
(=magma-switch-to-interactive-buffer-same-frame=) instead of =C-x o=
in the editting window.

On the other hand, =comint-mode= spawns an interactive process in a
full-featured emacs buffer. You can scroll using the usual keys, you
can edit the output of previous commands... It is mostly equivalent to
=term-mode= with =term-line-mode=, but in my experience, it suffers
from less minor bugs.

Another point to note is that =term-mode= sends input to a terminal,
and magma is run in that terminal. Getting the whole thing to run
under different systems (windows...) can prove tricky. On the other
hand, =comint= starts the magma process directly from emacs, and so
does not have this kind of requirements.

** Completion
*** Introduction
    A basic completion engine is provided, to be used in the magma
    editting window, or in a magma interactive buffer using comint.

    At the moment, it provides completion based on a dictionary. This
    dictionary is not included at the moment, but if you need to build
    it, we provide a script for doing so (linux only).

    This dictionary is updated with definitions from the current
    buffer, and from externally loaded files (using the =load= magma
    primitive).

*** Building the dictionary
    The =bin= folder contains a script named
    =build_completion_table.sh=. It is very basic, and the usage is
    quite constrained.

    The easiest case is the case where you are using =emacs= on a
    machine running =magma=. 
    
    In this case, follow these instructions:
    1. Find your magma installation directory;
    2. Place yourself in the =magma-mode= directory;
    3. Run the script:

       #+begin_src shell-script
         .../magma-mode$ bin/build_completion_table.sh $pathtomagma
       #+end_src

    4. The completion table will be in =data/magma_symbols.txt=
    
    In case you are running emacs on a different machine than the one
    running magma, the easiest way is to first create a fake
    documentation. Run the following on the magma machine:

    #+begin_src shell-script
      cd $pathtomagma/doc/html
      
      cat *.htm > ~/.magmadoc.htm
    #+end_src

    Then on the emacs machine:

    #+begin_src shell-script
       mkdir -p .tmpmagma/doc/html
     
       scp $magmamachine:.magmadoc.htm .tmpmagma/doc/html/
      
       cd .tmpmagma
    #+end_src
    
    then follow the above instructions to build the completion table,
    but use =~/tmpmagma/= as the path to the magma installation.
    
    Afterwards, you can remove the directory =.tmpmagma= and the file =magmadoc.htm=.

*** Invoking the completion

    In =magma-mode= and =magma-comint-interactive-mode=, the
    dictionary supplies =completion-at-point= with completion
    candidates. In =magma-comint-interactive-mode=,
    =completion-at-point= is bound to =TAB=, and in =magma-mode= it
    is not bound to any key by default. 

    In =magma-term-interactive-mode= (with =term-char-mode=),
    completion is supported out of the box by magma itself.

*** Limitations

    Context-dependent completion is not supported at the moment.

    The dictionary is only updated with function, procedure and
    intrinsics definitions. The reason is that I deem unlikely that a
    user will want completion for variables and inline-defined
    functions without any decent scoping. 

    However, it is not a frozen feature, so if you have usecases for
    extensions to the completion engine, and/or suggestions to
    overcome some of its current issues, please file an issue.

** Keymap
*** In an editting window

 - =C-c C-o= (=magma-switch-to-interactive-buffer-same-frame=): 
   start an interactive magma process, in the same frame
   and in a different buffer
 - =C-c o= (=magma-switch-to-interactive-buffer=): 
   start an interactive magma process in a different frame
 - =C-c C-k= (=magma-kill=): kill the magma process
 - =C-c C-i= (=magma-int=): interrupt the magma process
 - =C-c C-a= (=magma-restart=): restart the magma process
 - =C-c := (=magma-send-expression=): send an expression to the magma process
 - =C-c C-w (=magma-show-word=): show the value of the word at point
   in the magma buffer
 - =C-c C-l= (=magma-eval-line=): send the current line to the magma
   process
 - =C-c C-r= (=magma-eval-region=): send the current region to the
   magma process
 - =C-c C-b= (=magma-eval-buffer=): send the current buffer to the
   magma process
 - =C-c C-e= (=magma-eval=): if region is set, send the region to the
   magma process, else send the current line
 - =C-c C-u= (=magma-eval-until=): send the content of the buffer up
   to the point to the magma process
 - =C-c C-p= (=magma-eval-paragraph=): send the current paragraph to
   the magma process
 - =C-c h= (=magma-show-help=): prompt for a symbol, and shows the
   magma help about that symbol

The evaluation functions take optional prefix arguments:

 - =C-u 3 C-l= : send the current line to the magma process number 3
 - =C-u C-l= : prompts for a magma process, and send the current line
   to this process
 - =C-u C-u C-l= : send the current line to all magma processes

These features are highly untested.

*** In an editting window, with electric return activated
    
 - =RET= or =C-j= (=magma-newline-and-indent=): inserts a visual
   newline in the buffer. It is a regular =newline-and-indent= in most
   situations, but if the point is in the middle of the string, it
   cuts the string in half before inserting the newline.

   Example: (the [] indicates the point)

   #+begin_src 
      x := "a long sentence, really, a long sentence, [a]nd even a few more words";
      
      <RET> --->
      
      x := "a long sentence, really, a long sentence, "
      cat "and even a few more words";
   #+end_src
    
   This shouldn't change the way your code is evaluated.

 - =C-RET= or =C-c C-j= (=magma-special-newline-and-indent=): inserts
   an "evaluated" newline in the buffer. It is a regular
   =newline-and-indent= in most situations, but in a comment, it will
   assume that you want to continue the comment in the next line:

   #+begin_src    
      // Comment []
      
      <C-RET> --->
      
      // Comment 
      // []
   #+end_src

   and in a string, it will insert an explicit newline character:

   #+begin_src 
      x := "a long sentence, really, a long sentence, [a]nd even a few more words";
      
      <RET> --->
      
      x := "a long sentence, really, a long sentence, \\n"
      cat "and even a few more words";"
   #+end_src

